{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### 1. Loading the Data\n",
    "\n",
    "Import pandas:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "Load the data:\n",
    "\n",
    "df = pd.read_csv(\"s&p500.csv\", index_col='Date', parse_dates=True)\n",
    "\n",
    "Take a quick peek at the data:\n",
    "\n",
    "df.head()\n",
    "\n",
    "df.tail()\n",
    "\n",
    "### 2. Analyzing the Data\n",
    "\n",
    "Quick summary statistics of our DataFrame:\n",
    "\n",
    "df.describe()\n",
    "\n",
    "Single column statistics:\n",
    "\n",
    "df['Close'].min()\n",
    "\n",
    "df['Close'].max()\n",
    "\n",
    "Single column selection:\n",
    "\n",
    "df['Close'].head()\n",
    "\n",
    "#### Visualizations:\n",
    "\n",
    "A simple line chart showing Close price:\n",
    "\n",
    "df['Close'].plot(figsize=(14, 7), title='S&P Closing Price | 2017 - 2022')\n",
    "\n",
    "A more advanced chart combining `Close Price` and `Volume`:\n",
    "\n",
    "ax1 = df['Close'].plot(figsize=(14, 7), title='S&P Closing Price | 2017 - 2022')\n",
    "\n",
    "ax2 = ax1.twinx()\n",
    "df['Volume'].plot(ax=ax2, color='red', ylim=[df['Volume'].min(), df['Volume'].max() * 5])\n",
    "\n",
    "ax1.figure.legend([\"Close\", \"Volume\"])\n",
    "\n",
    "A few statistical visualizations.\n",
    "\n",
    "A histogram:\n",
    "\n",
    "df['Volume'].plot(kind='hist')\n",
    "\n",
    "A box plot:\n",
    "\n",
    "df['Volume'].plot(kind='box', vert=False)\n",
    "\n",
    "### 3. Data Wrangling\n",
    "\n",
    "`Close` price and it's SMA (Simple Moving Average):\n",
    "\n",
    "df['Close SMA'] = df['Close'].rolling(60).mean()\n",
    "\n",
    "df[['Close', 'Close SMA']].tail(10)\n",
    "\n",
    "ax = df[['Close', 'Close SMA']].plot(figsize=(14, 7), title='Close Price & its SMA')\n",
    "\n",
    "Calculate the bands as:\n",
    "\n",
    "```\n",
    "Lower Band = Close SMA - 2 * rolling std\n",
    "Upper Band = Close SMA + 2 * rolling std\n",
    "```\n",
    "\n",
    "df['Lower Band'] = df['Close SMA'] - (2 * df['Close'].rolling(60).std())\n",
    "df['Upper Band'] = df['Close SMA'] + (2 * df['Close'].rolling(60).std())\n",
    "\n",
    "df[['Close', 'Close SMA', 'Lower Band', 'Upper Band']].tail()\n",
    "\n",
    "This is how it looks like:\n",
    "\n",
    "df[['Close', 'Lower Band', 'Upper Band']].plot(figsize=(14, 7), title='Close Price & its SMA')\n",
    "\n",
    "Let's find that lower point that crosses the lower band:\n",
    "\n",
    "ax = df[['Close', 'Lower Band', 'Upper Band']].plot(figsize=(14, 7), title='Close Price & its SMA')\n",
    "ax.annotate(\n",
    "    \"Let's find this point\", xy=(pd.Timestamp(\"2020-03-23\"), 2237), \n",
    "    xytext=(0.9, 0.1), textcoords='axes fraction',\n",
    "    arrowprops=dict(facecolor='red', shrink=0.05),\n",
    "    horizontalalignment='right', verticalalignment='bottom');\n",
    "\n",
    "We can quickly query all the dates that crossed the lower band (in the period `2020-03-01` to `2020-06-01`)\n",
    "\n",
    "df.loc['2020-03-01': '2020-06-01'].query(\"Close < `Lower Band`\").head()\n",
    "\n",
    "And finally, we can zoom in in that period:\n",
    "\n",
    "df.loc['2020-01-01': '2020-06-01', ['Close', 'Lower Band', 'Upper Band']].plot(figsize=(14, 7), title='Close Price & its SMA | 2020-01-01 to 2020-06-01')\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
